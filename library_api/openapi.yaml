# Phi√™n b·∫£n OpenAPI
openapi: 3.0.3

# Th√¥ng tin chung v·ªÅ API
info:
  title: Library Management API
  description: API ƒë·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng, s√°ch, v√† c√°c ho·∫°t ƒë·ªông m∆∞·ª£n/tr·∫£ s√°ch trong th∆∞ vi·ªán.
  version: 1.0.0

# ƒê·ªãa ch·ªâ server
servers:
  - url: http://localhost:5000
    description: Development server

# G·∫Øn th·∫ª ƒë·ªÉ nh√≥m c√°c endpoints trong UI
tags:
  - name: User Operations
    description: APIs ƒë·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng
  - name: Book Operations
    description: APIs ƒë·ªÉ qu·∫£n l√Ω s√°ch (CRUD)
  - name: Borrow & Return Operations
    description: APIs cho vi·ªác m∆∞·ª£n v√† tr·∫£ s√°ch

# ƒê·ªãnh nghƒ©a t·∫•t c·∫£ c√°c endpoints (ƒë∆∞·ªùng d·∫´n)
paths:
  # --- User Paths ---
  /users:
    get:
      tags: [User Operations]
      summary: L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng üßë‚Äçü§ù‚Äçüßë
      responses:
        '200':
          description: Th√†nh c√¥ng. Tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c ng∆∞·ªùi d√πng.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [User Operations]
      summary: T·∫°o m·ªôt ng∆∞·ªùi d√πng m·ªõi üë§
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Thi·∫øu tr∆∞·ªùng `name` ho·∫∑c `email`.
        '409':
          description: Email ƒë√£ t·ªìn t·∫°i.

  /users/{user_id}:
    get:
      tags: [User Operations]
      summary: T√¨m ng∆∞·ªùi d√πng theo ID üÜî
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: Th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.

  # --- Book Paths ---
  /books:
    get:
      tags: [Book Operations]
      summary: L·∫•y danh s√°ch t·∫•t c·∫£ s√°ch üìö
      responses:
        '200':
          description: Th√†nh c√¥ng. Tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c cu·ªën s√°ch.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags: [Book Operations]
      summary: Th√™m m·ªôt s√°ch m·ªõi üìñ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: T·∫°o s√°ch th√†nh c√¥ng.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.

  /books/{book_id}:
    get:
      tags: [Book Operations]
      summary: T√¨m s√°ch theo ID üîç
      parameters:
        - $ref: '#/components/parameters/BookIdParam'
      responses:
        '200':
          description: Th√¥ng tin chi ti·∫øt c·ªßa s√°ch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Kh√¥ng t√¨m th·∫•y s√°ch.
    put:
      tags: [Book Operations]
      summary: C·∫≠p nh·∫≠t th√¥ng tin s√°ch üîÑ
      parameters:
        - $ref: '#/components/parameters/BookIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '200':
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.
        '404':
          description: Kh√¥ng t√¨m th·∫•y s√°ch.
    delete:
      tags: [Book Operations]
      summary: X√≥a m·ªôt cu·ªën s√°ch ‚ùå
      parameters:
        - $ref: '#/components/parameters/BookIdParam'
      responses:
        '200':
          description: X√≥a s√°ch th√†nh c√¥ng.
        '404':
          description: Kh√¥ng t√¨m th·∫•y s√°ch.
        '409':
          description: Kh√¥ng th·ªÉ x√≥a s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n.

  # --- Borrow & Return Paths ---
  /books/{book_id}/borrow:
    post:
      tags: [Borrow & Return Operations]
      summary: M∆∞·ª£n m·ªôt cu·ªën s√°ch üõí
      parameters:
        - $ref: '#/components/parameters/BookIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ID c·ªßa ng∆∞·ªùi m∆∞·ª£n s√°ch.
                  example: 1
              required: [user_id]
      responses:
        '201':
          description: M∆∞·ª£n s√°ch th√†nh c√¥ng. Tr·∫£ v·ªÅ th√¥ng tin l∆∞·ª£t m∆∞·ª£n.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowRecord'
        '400':
          description: Thi·∫øu `user_id`.
        '404':
          description: Kh√¥ng t√¨m th·∫•y s√°ch ho·∫∑c ng∆∞·ªùi d√πng.
        '409':
          description: S√°ch kh√¥ng c√≥ s·∫µn ƒë·ªÉ m∆∞·ª£n.

  /books/{book_id}/return:
    post:
      tags: [Borrow & Return Operations]
      summary: Tr·∫£ m·ªôt cu·ªën s√°ch üì¨
      parameters:
        - $ref: '#/components/parameters/BookIdParam'
      responses:
        '200':
          description: Tr·∫£ s√°ch th√†nh c√¥ng.
        '400':
          description: S√°ch kh√¥ng ·ªü tr·∫°ng th√°i ƒëang ƒë∆∞·ª£c m∆∞·ª£n.
        '404':
          description: Kh√¥ng t√¨m th·∫•y s√°ch.
        '500':
          description: Kh√¥ng t√¨m th·∫•y b·∫£n ghi m∆∞·ª£n s√°ch t∆∞∆°ng ·ª©ng.

# N∆°i ƒë·ªãnh nghƒ©a c√°c th√†nh ph·∫ßn c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng
components:
  schemas:
    # Schema cho ƒë·ªëi t∆∞·ª£ng User ƒë·∫ßy ƒë·ªß
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: "Nguy·ªÖn VƒÉn A"
        email:
          type: string
          format: email
          example: "a.nguyen@example.com"
      required: [id, name, email]

    # Schema ƒë·ªÉ t·∫°o User m·ªõi (kh√¥ng c√≥ id)
    NewUser:
      type: object
      properties:
        name:
          type: string
          example: "Tr·∫ßn Th·ªã B"
        email:
          type: string
          format: email
          example: "b.tran@example.com"
      required: [name, email]

    # Schema cho ƒë·ªëi t∆∞·ª£ng Book ƒë·∫ßy ƒë·ªß
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 101
        title:
          type: string
          example: "L√£o H·∫°c"
        author:
          type: string
          example: "Nam Cao"
        year:
          type: integer
          example: 1943
        status:
          type: string
          enum: [available, borrowed]
          example: "available"
      required: [id, title, author, year, status]

    # Schema ƒë·ªÉ t·∫°o/c·∫≠p nh·∫≠t Book
    NewBook:
      type: object
      properties:
        title:
          type: string
          example: "S·ªë ƒê·ªè"
        author:
          type: string
          example: "V≈© Tr·ªçng Ph·ª•ng"
        year:
          type: integer
          example: 1936
      required: [title, author, year]

    # Schema cho b·∫£n ghi m∆∞·ª£n s√°ch
    BorrowRecord:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book_id:
          type: integer
        user_id:
          type: integer
        borrow_date:
          type: string
          format: date-time
        return_date:
          type: string
          format: date-time
          nullable: true

  # C√°c tham s·ªë c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng
  parameters:
    BookIdParam:
      name: book_id
      in: path
      description: ID c·ªßa cu·ªën s√°ch.
      required: true
      schema:
        type: integer
    UserIdParam:
      name: user_id
      in: path
      description: ID c·ªßa ng∆∞·ªùi d√πng.
      required: true
      schema:
        type: integer